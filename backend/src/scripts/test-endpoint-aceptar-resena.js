import sequelize from '../config/database.js';
import { Visita, VisitaParticipante, User, Cafe, Resena } from '../models/index.js';

console.log('üöÄ Probando endpoint de aceptar invitaci√≥n con rese√±a...');

const testEndpointAceptarResena = async () => {
  try {
    console.log('üîå Conectando a la base de datos...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n exitosa');
    
    // Buscar usuarios espec√≠ficos
    const duki = await User.findOne({ where: { email: 'duki@example.com' } });
    const ysy = await User.findOne({ where: { email: 'ysy.a@example.com' } });
    const cafe = await Cafe.findOne();
    
    if (!duki || !ysy || !cafe) {
      console.log('‚ùå No se encontraron los usuarios o cafeter√≠a necesarios');
      return;
    }
    
    console.log(`üë§ Duki: ${duki.name} (ID: ${duki.id})`);
    console.log(`üë• Ysy: ${ysy.name} (ID: ${ysy.id})`);
    console.log(`‚òï Cafeter√≠a: ${cafe.name}`);
    
    // ===== PASO 1: Crear una visita compartida =====
    console.log('\nüìù PASO 1: Creando visita compartida...');
    
    const nuevaVisita = await Visita.create({
      cafeteriaId: cafe.id,
      esCompartida: true,
      maxParticipantes: 10,
      fecha: new Date(),
      estado: 'activa'
    });
    
    console.log(`‚úÖ Visita creada con ID: ${nuevaVisita.id}`);
    
    // ===== PASO 2: Agregar al creador =====
    console.log('\nüìù PASO 2: Agregando al creador...');
    
    await VisitaParticipante.create({
      visitaId: nuevaVisita.id,
      usuarioId: duki.id,
      rol: 'creador',
      estado: 'aceptada',
      fechaInvitacion: new Date(),
      fechaRespuesta: new Date()
    });
    
    console.log(`‚úÖ Creador agregado`);
    
    // ===== PASO 3: Agregar participante pendiente =====
    console.log('\nüìù PASO 3: Agregando participante pendiente...');
    
    await VisitaParticipante.create({
      visitaId: nuevaVisita.id,
      usuarioId: ysy.id,
      rol: 'participante',
      estado: 'pendiente',
      fechaInvitacion: new Date()
    });
    
    console.log(`‚úÖ Participante pendiente agregado`);
    
    // ===== PASO 4: Crear rese√±a del creador =====
    console.log('\nüìù PASO 4: Creando rese√±a del creador...');
    
    await Resena.create({
      visitaId: nuevaVisita.id,
      usuarioId: duki.id,
      calificacion: 5,
      comentario: "¬°Excelente experiencia! El caf√© estaba perfecto."
    });
    
    console.log(`‚úÖ Rese√±a del creador creada`);
    
    // ===== PASO 5: Simular llamada al endpoint =====
    console.log('\nüìù PASO 5: Simulando llamada al endpoint...');
    
    // Simular los datos que enviar√≠a el frontend
    const requestData = {
      comentario: "¬°Me encant√≥ la experiencia! El ambiente era genial y el caf√© excelente.",
      calificacion: 4
    };
    
    console.log('üìã Datos de la request:', requestData);
    
    // ===== PASO 6: Aplicar la l√≥gica del endpoint =====
    console.log('\nüìù PASO 6: Aplicando l√≥gica del endpoint...');
    
    // Verificar que la invitaci√≥n existe y est√° pendiente
    const participacion = await VisitaParticipante.findOne({
      where: {
        visitaId: nuevaVisita.id,
        usuarioId: ysy.id,
        estado: 'pendiente'
      }
    });
    
    if (!participacion) {
      console.log('‚ùå No se encontr√≥ la participaci√≥n pendiente');
      return;
    }
    
    console.log('‚úÖ Participaci√≥n pendiente encontrada');
    
    // Verificar que no existe ya una rese√±a del usuario
    const rese√±aExistente = await Resena.findOne({
      where: {
        visitaId: nuevaVisita.id,
        usuarioId: ysy.id
      }
    });
    
    if (rese√±aExistente) {
      console.log('‚ùå Ya existe una rese√±a del usuario para esta visita');
      return;
    }
    
    console.log('‚úÖ No existe rese√±a previa del usuario');
    
    // Actualizar el estado de la participaci√≥n a aceptada
    await participacion.update({
      estado: 'aceptada',
      fechaRespuesta: new Date()
    });
    
    console.log('‚úÖ Participaci√≥n actualizada a aceptada');
    
    // Crear la rese√±a
    await Resena.create({
      visitaId: nuevaVisita.id,
      usuarioId: ysy.id,
      comentario: requestData.comentario,
      calificacion: requestData.calificacion
    });
    
    console.log('‚úÖ Rese√±a creada exitosamente');
    
    // ===== PASO 7: Verificar resultados =====
    console.log('\nüìù PASO 7: Verificando resultados...');
    
    const participacionFinal = await VisitaParticipante.findOne({
      where: {
        visitaId: nuevaVisita.id,
        usuarioId: ysy.id
      }
    });
    
    const rese√±aFinal = await Resena.findOne({
      where: {
        visitaId: nuevaVisita.id,
        usuarioId: ysy.id
      }
    });
    
    console.log(`‚úÖ Estado final de participaci√≥n: ${participacionFinal.estado}`);
    console.log(`‚úÖ Rese√±a creada con calificaci√≥n: ${rese√±aFinal.calificacion}`);
    console.log(`‚úÖ Comentario: "${rese√±aFinal.comentario}"`);
    
    // ===== PASO 8: Verificar todas las rese√±as =====
    console.log('\nüìù PASO 8: Verificando todas las rese√±as...');
    
    const todasLasResenas = await Resena.findAll({
      where: { visitaId: nuevaVisita.id },
      include: [
        {
          model: User,
          as: 'usuario',
          attributes: ['id', 'name']
        }
      ]
    });
    
    console.log(`‚úÖ Total de rese√±as en la visita: ${todasLasResenas.length}`);
    todasLasResenas.forEach((resena, index) => {
      console.log(`  ${index + 1}. ${resena.usuario.name}: ${resena.calificacion}/5 - "${resena.comentario}"`);
    });
    
    console.log('\nüéâ ¬°√âXITO! El endpoint funciona correctamente');
    console.log('‚úÖ La invitaci√≥n se acept√≥ y la rese√±a se guard√≥');
    console.log('‚úÖ El usuario ahora es participante activo de la visita');
    console.log('‚úÖ La rese√±a aparecer√° en el detalle de la visita');
    console.log('‚úÖ El frontend puede usar este endpoint para aceptar invitaciones con rese√±as');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  } finally {
    await sequelize.close();
    console.log('üîå Conexi√≥n cerrada');
  }
};

testEndpointAceptarResena()
  .then(() => {
    console.log('‚úÖ Script de prueba completado');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error en script de prueba:', error);
    process.exit(1);
  }); 